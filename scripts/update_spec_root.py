#!/usr/bin/env python3
"""
Update test/specs/root.zig to import all generated test files.
"""

import os
from pathlib import Path


def main():
    # Get the repository root
    script_dir = Path(__file__).parent
    repo_root = script_dir.parent
    generated_root = repo_root / "test" / "specs" / "generated"
    root_file = repo_root / "test" / "specs" / "root.zig"

    # Find all generated .zig test files
    if not generated_root.exists():
        print("No generated tests found. Run generate_spec_tests.py first.")
        return

    test_files = list(generated_root.rglob("*.zig"))
    print(f"Found {len(test_files)} generated test files")

    # Generate root.zig content
    lines = [
        "// Root file for execution-specs tests",
        "// This imports all generated test files",
        "// Auto-generated by scripts/update_spec_root.py",
        "",
        "const std = @import(\"std\");",
        "const testing = std.testing;",
        "",
        "// Re-export runner for generated tests",
        "pub const runner = @import(\"runner.zig\");",
        "",
        "// Infrastructure test",
        "test \"spec runner infrastructure\" {",
        "    try testing.expect(true);",
        "}",
        "",
        "// Import generated tests",
    ]

    for test_file in sorted(test_files):
        rel_path = test_file.relative_to(generated_root)
        import_path = f"generated/{rel_path}".replace(".zig", "").replace(os.sep, "/")
        lines.append(f'test {{ _ = @import("{import_path}.zig"); }}')

    # Write the updated root file
    with open(root_file, "w") as f:
        f.write("\n".join(lines))
        f.write("\n")

    print(f"Updated {root_file} with {len(test_files)} test imports")


if __name__ == "__main__":
    main()
