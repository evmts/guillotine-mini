# Guillotine EVM Test Suite Analysis
# Generated: 2025-10-05
# Test Command: zig build test-specs

================================================================================
EXECUTIVE SUMMARY
================================================================================

Total Test Failures: 161 expected/found mismatches
Total Test Files: 2,212 generated test files across 51 test categories
Test Output Lines: 743
Build Status: FAILED (1/3 steps succeeded)

The test suite terminated unexpectedly due to assertion failures in the EVM 
implementation. The primary issue appears to be related to balance tracking,
state management, and return value handling across contract calls.

================================================================================
TOP 20 MOST COMMON FAILURE PATTERNS
================================================================================

1. "expected 1, found 0" - 119 occurrences (73.9%)
   - Most common failure pattern
   - Likely boolean/success flag mismatches
   - Suggests contract call success/failure tracking issues

2. "expected 1000000000000000000, found 1000000010000000000" - 7 occurrences (4.3%)
   - Balance calculation errors
   - Off-by-10-billion wei discrepancy
   - Suggests precision or accumulation bug in value transfers

3. "expected 10000000000, found 0" - 6 occurrences (3.7%)
   - Return value or balance zeroing issue
   - Consistent 10 billion wei value being lost

4. "expected 0, found 1" - 5 occurrences (3.1%)
   - Inverse of pattern #1
   - Boolean flag or counter incorrectly set

5. "expected 0, found 1000000000000000000" - 4 occurrences (2.5%)
   - 1 ETH appearing unexpectedly
   - Balance state leak or incorrect initialization

6. "expected 91343852333181432387730302044767688728495783938, found 0" - 2 occurrences
   - Large value calculation returning zero
   - Likely overflow, underflow, or uninitialized return value

7. "expected 91343852333181432387730302044767688728495783937, found 0" - 2 occurrences
   - Similar to #6, off by 1
   - Suggests boundary condition in arithmetic operations

8. "expected 1000000010000000000, found 20000000000" - 2 occurrences
   - Significant value loss (1 ETH + 10 billion to 20 billion)
   - Possible truncation or incorrect calculation

9. "expected 10000000000, found 20000000000" - 2 occurrences
   - Value doubling instead of preserving
   - Suggests accumulation or multiplication bug

10. "expected 0, found 10000000000" - 2 occurrences
    - 10 billion wei appearing from nowhere
    - Balance leak or incorrect state initialization

11. "expected 966588469268559010541288244128342317224451555083, found 0" - 1 occurrence
    - Another large value zeroing out
    - Consistent pattern with #6 and #7

12. "expected 7749745057451750595654250470445435725065736516031707630110021203977110040882, found 0" - 1 occurrence
    - Extremely large value (>256 bits visible) returning zero
    - Possible U256 overflow or modulo operation issue

13. "expected 68640, found 55560" - 1 occurrence
    - Gas calculation error (off by 13,080)
    - Specific opcode gas cost miscalculation

14. "expected 37, found 48" - 1 occurrence
    - Small value discrepancy
    - Could be gas, offset, or size calculation

15. "expected 30160631535474763751089883118150601227211346208384589246060230858002923520, found 0" - 1 occurrence
    - Another large number zeroing
    - Pattern consistent with U256 handling issues

16. "expected 100000, found 0" - 1 occurrence
    - 100K value lost
    - Similar to other value zeroing patterns

17. "expected 100, found 99" - 1 occurrence
    - Off-by-one error
    - Loop counter or boundary condition

18. "expected 0, found 2" - 1 occurrence
    - Counter incremented twice instead of staying at zero
    - Loop or recursion issue

19. "expected 0, found 1000000000000000023" - 1 occurrence
    - 1 ETH + 23 wei appearing
    - Complex balance state corruption

20. "expected 1000000000000000000, found 1000000010000000000" - Same as #2

================================================================================
FAILURE CATEGORIES
================================================================================

1. BOOLEAN/SUCCESS FLAGS (124 failures, 77.0%)
   Patterns: "expected 1, found 0" and "expected 0, found 1"
   - Contract call success/failure states incorrect
   - SSTORE/SLOAD return value issues
   - State transition validation failures
   
   Impact: Critical - Affects contract execution flow
   Root Cause: Likely in call stack handling or state commit logic

2. BALANCE CALCULATIONS (23 failures, 14.3%)
   Patterns: Various wei amount mismatches
   - Off-by-10-billion errors (10000000000 wei discrepancies)
   - Complete value zeroing (large numbers → 0)
   - Incorrect accumulation (value doubling/halving)
   
   Impact: Critical - Affects value transfers and contract balances
   Root Cause: Likely in balance tracking, gas refunds, or U256 arithmetic

3. LARGE NUMBER HANDLING (8 failures, 5.0%)
   Patterns: Very large expected values returning 0
   - U256 overflow/underflow
   - Modulo operations incorrect
   - Memory corruption in bigint handling
   
   Impact: High - Affects cryptographic operations and large value transfers
   Root Cause: Likely in U256 implementation or memory management

4. GAS CALCULATIONS (1 failure, 0.6%)
   Pattern: "expected 68640, found 55560"
   - Specific opcode gas cost errors
   - Gas refund calculation issues
   
   Impact: Medium - Affects transaction cost accuracy
   Root Cause: Opcode gas table or refund logic

5. OFF-BY-ONE ERRORS (2 failures, 1.2%)
   Patterns: "expected 100, found 99" and related
   - Loop boundary conditions
   - Array indexing issues
   
   Impact: Low-Medium - Edge case handling
   Root Cause: Loop conditions or index calculations

6. INSUFFICIENT BALANCE ERRORS (3 unique patterns)
   Patterns: "CALL FAILED: insufficient balance"
   - Caller needs 100000000000000000000, has 1000000000000100000
   - Caller needs 100001, has 100000  
   - Caller needs 1000000000000000001, has 1000000000000000000
   
   Impact: Medium - Transaction validation
   Root Cause: Balance check timing or precision

================================================================================
TEST DIRECTORIES WITH FAILURES
================================================================================

Test specs are organized across 51 categories including:
- stAttackTest
- stBadOpcode  
- stBugs
- stCallCodes (81 files)
- stCallCreateCallCodeTest (45 files)
- stCallDelegateCodesCallCodeHomestead (60 files)
- stCallDelegateCodesHomestead (60 files)
- stChainId
- stCodeCopyTest
- stCodeSizeLimit
- stCreate2 (48 files)
- stCreateTest (31 files)
- stDelegatecallTestHomestead (30 files)
- stEIP150Specific (15 files)
- stEIP150singleCodeGasPrices (32 files)
- stEIP158Specific (10 files)
- stExample
- stTimeConsuming (multiple sstore_combinations tests)
- ... and 34 more categories

Note: Cannot determine specific failing test files without test names in output.
The test runner appears to print debug output but not test case identifiers.

================================================================================
EXECUTION TRACE PATTERNS
================================================================================

Common execution patterns observed:
1. Contract deployment and initialization
2. Multi-level contract calls (addresses like 16.0.0.1 → 16.0.0.2 → 16.0.0.3)
3. Value transfers between contracts
4. RETURN operations with varying gas_left values
5. Insufficient balance checks causing CALL FAILED

Sample trace showing the pattern:
- TRANSFER from caller to contract with value
- Contract calls another contract (nested)
- RETURN with success=true but incorrect return value
- Expected/found mismatch logged

================================================================================
KEY FINDINGS
================================================================================

1. PRIMARY BUG: Boolean/success flag handling
   - 77% of failures are "expected 1, found 0" 
   - Suggests return values or success flags not properly propagated
   - Likely in CALL, DELEGATECALL, or STATICCALL implementations

2. SECONDARY BUG: Balance tracking
   - Systematic 10-billion wei discrepancies
   - Large values zeroing out
   - Points to U256 arithmetic or state management bug

3. TERTIARY BUG: Large number arithmetic
   - Multiple instances of very large numbers returning 0
   - U256 overflow/underflow not handled correctly
   - Possible memory corruption or incorrect modulo operations

4. TEST INFRASTRUCTURE: 
   - Tests running but terminating on assertion failures
   - Debug output present (TRANSFER, RETURN, CALL FAILED logs)
   - No clear test case names in output makes failure attribution difficult

5. BUILD SYSTEM:
   - Test step failing: .zig-cache/o/.../test
   - 1 of 3 build steps succeeded
   - Using Zig 0.15.1

================================================================================
RECOMMENDATIONS FOR DEBUGGING
================================================================================

1. Focus on boolean return value handling first (77% of failures)
   - Check CALL/DELEGATECALL/STATICCALL return value propagation
   - Verify stack manipulation after calls
   - Review success flag logic

2. Investigate balance tracking (14% of failures)
   - Add logging to balance update operations
   - Check gas refund calculations (10 billion pattern)
   - Verify U256 addition/subtraction correctness

3. Review U256 implementation (5% of failures)
   - Test overflow/underflow handling
   - Verify modulo operations
   - Check memory safety in bigint operations

4. Add test case identification to output
   - Would allow mapping failures to specific test files
   - Currently impossible to know which of 2,212 tests are failing

5. Consider running subsets of tests
   - Run individual test categories to isolate issues
   - Start with simpler categories (stExample) before complex ones

================================================================================
TECHNICAL DETAILS
================================================================================

Environment:
- Zig version: 0.15.1
- Platform: macOS (Darwin 24.3.0)
- Working directory: /Users/williamcory/guillotine-mini
- Build cache: .zig-cache/

Test Structure:
- 2,212 generated test files
- 51 test categories
- Tests auto-generated from Ethereum test specs

Output Characteristics:
- 743 lines of output
- 161 assertion failures
- Debug traces show TRANSFER, RETURN, CALL FAILED operations
- No structured test result reporting

================================================================================
END OF ANALYSIS
================================================================================
