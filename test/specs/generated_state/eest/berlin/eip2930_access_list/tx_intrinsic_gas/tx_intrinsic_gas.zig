const std = @import("std");
const testing = std.testing;
const root = @import("../../../../../root.zig");
const runner = root.runner;

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Berlin_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Berlin-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Cancun_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Cancun-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_London_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_London-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Paris_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Paris-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Prague_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Prague-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_1_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_1-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_False_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_False-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_12_address_42_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_12_address_42_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_1_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_1_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_1_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_1_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_2_keys_inversion_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_2_keys_inversion-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_2_address_empty_keys_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_2_address_empty_keys-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_1_zero_byte_1_non_zero_byte_reversed_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_1_zero_byte_1_non_zero_byte_reversed]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_4_zero_byte_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_4_zero_byte]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_empty_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_empty]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_1_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_1]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_2_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_2]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_31_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_31_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_32_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_32_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_33_empty_bytes_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_33_empty_bytes]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_3_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_3]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}

test "tests_eest_berlin_eip2930_access_list_test_tx_intrinsic_gas_py__test_tx_intrinsic_gas_fork_Shanghai_tx_type_2_state_test_below_intrinsic_True_access_list_empty_data_set_66_bytes_half_zeros_" {
    const allocator = testing.allocator;

    // Read and parse the JSON test file
    const json_path = "execution-specs/tests/eest/static/state_tests/state_tests/eest/berlin/eip2930_access_list/tx_intrinsic_gas/tx_intrinsic_gas.json";
    const json_content = try std.fs.cwd().readFileAlloc(allocator, json_path, 100 * 1024 * 1024);
    defer allocator.free(json_content);

    const parsed = try std.json.parseFromSlice(std.json.Value, allocator, json_content, .{});
    defer parsed.deinit();

    // Get the specific test case
    const test_name = "tests/eest/berlin/eip2930_access_list/test_tx_intrinsic_gas.py::test_tx_intrinsic_gas[fork_Shanghai-tx_type_2-state_test-below_intrinsic_True-access_list_empty-data_set_66_bytes_half_zeros]";
    const test_case = parsed.value.object.get(test_name) orelse return error.TestNotFound;

    // Run the test with path and name for trace generation
    try runner.runJsonTestWithPathAndName(allocator, test_case, json_path, test_name);
}
